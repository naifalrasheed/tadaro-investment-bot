name: Deploy to AWS App Runner

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  AWS_REGION: us-east-1
  APP_RUNNER_SERVICE: tadaro-investment-bot

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run basic tests
      run: |
        python -c "import flask; print('Flask OK')"
        python -c "import psycopg2; print('PostgreSQL driver OK')" || python -c "import psycopg; print('psycopg v3 OK')"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build and push Docker image to ECR
      id: build-image
      run: |
        # Create ECR repository if it doesn't exist
        aws ecr describe-repositories --repository-names tadaro-investment-bot --region $AWS_REGION || \
        aws ecr create-repository --repository-name tadaro-investment-bot --region $AWS_REGION

        # Get ECR login token
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

        # Build Docker image
        docker build -t tadaro-investment-bot .

        # Tag and push image
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/tadaro-investment-bot:latest
        docker tag tadaro-investment-bot:latest $IMAGE_URI
        docker push $IMAGE_URI

        echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT

    - name: Deploy to App Runner
      run: |
        # Check if App Runner service exists
        if aws apprunner describe-service --service-arn arn:aws:apprunner:$AWS_REGION:$(aws sts get-caller-identity --query Account --output text):service/$APP_RUNNER_SERVICE --region $AWS_REGION > /dev/null 2>&1; then
          echo "Updating existing App Runner service..."
          aws apprunner start-deployment --service-arn arn:aws:apprunner:$AWS_REGION:$(aws sts get-caller-identity --query Account --output text):service/$APP_RUNNER_SERVICE --region $AWS_REGION
        else
          echo "Creating new App Runner service..."
          # Create App Runner service configuration
          cat > apprunner-config.json << EOF
          {
            "ServiceName": "$APP_RUNNER_SERVICE",
            "SourceConfiguration": {
              "ImageRepository": {
                "ImageIdentifier": "${{ steps.build-image.outputs.image-uri }}",
                "ImageConfiguration": {
                  "Port": "8000",
                  "RuntimeEnvironmentVariables": {
                    "FLASK_ENV": "production",
                    "DATABASE_URL": "${{ secrets.DATABASE_URL }}",
                    "GOOGLE_CLIENT_ID": "${{ secrets.GOOGLE_CLIENT_ID }}",
                    "GOOGLE_CLIENT_SECRET": "${{ secrets.GOOGLE_CLIENT_SECRET }}",
                    "CLAUDE_API_KEY": "${{ secrets.CLAUDE_API_KEY }}",
                    "TWELVEDATA_API_KEY": "${{ secrets.TWELVEDATA_API_KEY }}"
                  }
                },
                "ImageRepositoryType": "ECR"
              }
            },
            "InstanceConfiguration": {
              "Cpu": "0.25 vCPU",
              "Memory": "0.5 GB"
            },
            "HealthCheckConfiguration": {
              "Protocol": "HTTP",
              "Path": "/health",
              "Interval": 20,
              "Timeout": 10,
              "HealthyThreshold": 3,
              "UnhealthyThreshold": 5
            }
          }
          EOF

          aws apprunner create-service --cli-input-json file://apprunner-config.json --region $AWS_REGION
        fi

    - name: Wait for deployment
      run: |
        echo "Waiting for App Runner service to be ready..."
        aws apprunner wait service-operation-succeeded --service-arn arn:aws:apprunner:$AWS_REGION:$(aws sts get-caller-identity --query Account --output text):service/$APP_RUNNER_SERVICE --region $AWS_REGION

    - name: Get service URL
      run: |
        SERVICE_URL=$(aws apprunner describe-service --service-arn arn:aws:apprunner:$AWS_REGION:$(aws sts get-caller-identity --query Account --output text):service/$APP_RUNNER_SERVICE --query 'Service.ServiceUrl' --output text --region $AWS_REGION)
        echo "🚀 Application deployed successfully!"
        echo "🌐 Service URL: https://$SERVICE_URL"
        echo "📊 Custom Domain: https://tadaro.ai (configure DNS)"